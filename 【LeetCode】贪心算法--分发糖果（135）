今日题目


老师想给孩子们分发糖果，有N个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。
你需要按照以下要求，帮助老师给这些孩子分发糖果：
每个孩子至少分配到 1 个糖果。相邻的孩子中，评分高的孩子必须获得更多的糖果。那么这样下来，老师至少需要准备多少颗糖果呢？


示例 1:
输入: [1,0,2]
输出: 5
解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。
示例 2:
输入: [1,2,2]
输出: 4
解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。第三个孩子只得到 1 颗糖果，这已满足上述两个条件。


题目分析


对于这个问题，主要的条件是要相邻孩子，得分高的拿的糖果要多（不包括相等得分），还有就是每个人最少都要有一个。
解决这个问题我们还是采用贪心算法，首先初始化每个人分配的糖果数量都是1，然后这个算法需要遍历两遍，第一遍从左往右遍历，如果当前孩子的分数大于前一个孩子的分数，则当前孩子得到的糖果在前一个孩子的基础上加1；然后，第二遍从右往左遍历，如果当前孩子的分数大于他右边孩子的分数，并且他的糖果不比他右边孩子多，则糖果数在他基础上加1；最后，将所有孩子的糖果数相加即可。
第二次遍历是为了处理数组中降序和有出现相邻孩子分数相同的情况。


代码实现

class Solution:
    def candy(self, ratings):
        """
        :type ratings: List[int]
        :rtype: int
        """
        num = [1]*len(ratings)
        for i in range(0,len(ratings)-1):
            if ratings[i+1] > ratings[i]:
                num[i+1] = num[i] + 1     
        for i in range(len(ratings)-1,0,-1):
            if ratings[i] < ratings[i-1]:
                num[i-1] = max(num[i]+1,num[i-1])
            
        return sum(num)

 
