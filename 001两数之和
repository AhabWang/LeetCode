解题方案

    思路 1 时间复杂度: O(N^2)-空间复杂度: O(1)
暴力解法，两轮遍历


class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if nums[i] + nums[j] == target:
                    return [i, j]

    思路 2  时间复杂度: O(N) 空间复杂度: O(N)


    建立字典 lookup 存放第一个数字，并存放该数字的 index
    判断 lookup 中是否存在： target - 当前数字， 则表面 当前值和 lookup中的值加和为 target.
    如果存在，则返回： target - 当前数字 的 index 和 当前值的 index


class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        lookup = {}
        for i, num in enumerate(nums):
            if target - num in lookup:
                return [lookup[target-num], i]
            else:
                lookup[num] = i
